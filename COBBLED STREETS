import java.util.Arrays;
import java.util.Scanner;

class Main {
	
	class Path implements Comparable<Path>
	{
		int src,dest,len;
		@Override
		public int compareTo(Path o) {
			return this.len-o.len;
		}
	};
	
	class subset
	{
		int parent,rank;
	}
	
	int N,M;
	Path rasta[];
	Main(int n,int m)
	{
		N=n;
		M=m;
		rasta=new Path[M];
		for(int i=0;i<M;i++)
		{
			rasta[i]=new Path();
		}
	}
	
	
	
	
	int find(subset subsets[], int i)
	{
		if(subsets[i].parent!=i)
			subsets[i].parent=find(subsets,subsets[i].parent);
		return subsets[i].parent;
	}
	
	void union(subset subsets[], int x, int y)
	{
		int xroot=find(subsets,x);
		int yroot=find(subsets,y);
		if(subsets[xroot].rank<subsets[yroot].rank)
			subsets[xroot].parent=yroot;
		else if(subsets[xroot].rank>subsets[yroot].rank)
			subsets[yroot].parent=xroot;
		else
		{
			subsets[yroot].parent=xroot;
			subsets[xroot].rank++;
		}
	}
	
	void kruskal(int price)
	{
		Path result[] = new Path[N];
		int v=0,p=0;
		for(v=0;v<N;v++)
			result[v]=new Path();
		Arrays.sort(rasta);
		subset subsets[]=new subset[M];
		for(v=0;v<M;v++)
			subsets[v]=new subset();
		for(v=0;v<M;v++)
		{
			subsets[v].parent=v;
			subsets[v].rank=0;
		}
		int i=0;
		while(p<N-1)
		{
			Path nextpath = new Path();
			nextpath=rasta[i++];
			int x=find(subsets,nextpath.src);
			int y=find(subsets,nextpath.dest);
			
			if(x!=y)
			{
				result[p++]=nextpath;
				union(subsets,x,y);
			}
		}
		int sum=0;
		for(v=0;v<p;v++)
		{
			sum=sum+result[v].len;
		}
		System.out.println(sum*price);
	}
	
	public static void main(String[] args)throws java.lang.Exception
	{
		Scanner sc = new Scanner(System.in);
		int t =sc.nextInt();
		for(int k=0;k<t;k++){
		int p =sc.nextInt();
		int n =sc.nextInt();
		int m=sc.nextInt();
		Main street = new Main(n,m);
		int i;
		int source[]=new int[m];
		int destination[]=new int[m];
		int length[]=new int[m];
		for(i=0;i<m;i++)
		{
			source[i]=sc.nextInt();
			destination[i]=sc.nextInt();
			length[i]=sc.nextInt();
		}
		for(i=0;i<m;i++)
		{
			street.rasta[i].src=source[i];
			street.rasta[i].dest=destination[i];
			street.rasta[i].len=length[i];
		}
		street.kruskal(p);
		}
		
		sc.close();
	}
}
