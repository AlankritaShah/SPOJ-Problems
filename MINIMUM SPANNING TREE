import java.util.Arrays;
import java.util.Scanner;

class Main {
	
	class Edge implements Comparable<Edge>
	{
		int src,dest,weight;
		@Override
		public int compareTo(Edge comparededge) {
			return this.weight-comparededge.weight;
		}
	};
	
	class subset
	{
		int parent,rank;
	};
	
	int V,E;
	Edge edge[];
	
	Main(int v, int e)
	{
		V=v;
		E=e;
		edge=new Edge[E];
		for(int i=0;i<E;i++)
			edge[i]=new Edge();
	}
	
	int find(subset subsets[], int i)
	{
		if(subsets[i].parent!=i)
		{
			subsets[i].parent=find(subsets,subsets[i].parent);
		}
		return subsets[i].parent;
	}
	
	void union(subset subsets[], int x, int y)
	{
		int xroot = find(subsets, x);
		int yroot = find(subsets, y);
		
		if(subsets[xroot].rank<subsets[yroot].rank)
			subsets[xroot].parent=yroot;
		else if(subsets[xroot].rank>subsets[yroot].rank)
			subsets[yroot].parent=xroot;
		else
		{
			subsets[yroot].parent=xroot;
			subsets[xroot].rank++;
		}
	}
	
	void kruskal()
	{
		Edge result[]=new Edge[V];
		int j=0;
		int i=0;
		for(i=0;i<V;i++)
			result[i]=new Edge();
		Arrays.sort(edge);
		subset subsets[]=new subset[E];
		for(i=0;i<E;i++)
			subsets[i]=new subset();
		for(i=0;i<E;i++)
		{
			subsets[i].parent=i;
			subsets[i].rank=0;
		}
		i=0;
		while(j<V-1)
		{
			Edge nextedge = new Edge();
			nextedge = edge[i++];
		//	System.out.println("nextedge="+nextedge.src+" "+nextedge.dest+" "+nextedge.weight);
			int x= find(subsets,nextedge.src);
			int y= find(subsets, nextedge.dest);
			
			if(x!=y)
			{
				result[j++]=nextedge;
				union(subsets, x,y);
			}
		}
		int sum=0;
		for(i=0;i<j;i++)
		{
			sum=sum+result[i].weight;
		}
		System.out.println(sum);
	}
	
	public static void main(String[] args)throws java.lang.Exception
	{
		Scanner sc = new Scanner(System.in);
		int v= sc.nextInt();
		int e= sc.nextInt();
		Main km = new Main(v,e);
		int source[]=new int[e];
		int destination[]=new int[e];
		int wt[]=new int[e];
		for(int i=0;i<e;i++)
		{
			source[i]=sc.nextInt();
			destination[i]=sc.nextInt();
			wt[i]=sc.nextInt();
		}
//		for(int i=0;i<e;i++)
//		{
//			System.out.println(source[i]);
//			System.out.println(destination[i]);
//			System.out.println(wt[i]);
//		}
		for(int i=0;i<e;i++)
		{
			km.edge[i].src = source[i];
			km.edge[i].dest = destination[i];
			km.edge[i].weight = wt[i];
		}
		km.kruskal();
		sc.close();
	}
	
}
