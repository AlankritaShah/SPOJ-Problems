import java.util.Arrays;
import java.util.Scanner;


class Main {
	
	class Path implements Comparable<Path>
	{
		int src,dest,len;
		@Override
		public int compareTo(Path o) {
			return this.len-o.len;
		}
	};
	
	class subset
	{
		int parent,rank;
	}
	
	int N,M;
	Path rasta[];
	Main(int n,int m)
	{
		N=n;
		M=m;
		rasta=new Path[M];
		for(int i=0;i<M;i++)
		{
			rasta[i]=new Path();
		}
	}
	
	int find(subset subsets[], int i)
	{
		if(subsets[i].parent!=i)
			subsets[i].parent=find(subsets,subsets[i].parent);
		return subsets[i].parent;
	}
	
	void union(subset subsets[], int x, int y)
	{
		int xroot=find(subsets,x);
		int yroot=find(subsets,y);
		if(subsets[xroot].rank<subsets[yroot].rank)
			subsets[xroot].parent=yroot;
		else if(subsets[xroot].rank>subsets[yroot].rank)
			subsets[yroot].parent=xroot;
		else
		{
			subsets[yroot].parent=xroot;
			subsets[xroot].rank++;
		}
	}
	
	void kruskal()
	{
		Path result[] = new Path[N-1];
		int v=0,p=0;
		for(v=0;v<N-1;v++)
			result[v]=new Path();
		Arrays.sort(rasta);
		subset subsets[]=new subset[M];
		for(v=0;v<M;v++)
			subsets[v]=new subset();
		for(v=0;v<M;v++)
		{
			subsets[v].parent=v;
			subsets[v].rank=0;
		}
		int i=0;
		while(p<N-1)
		{
			Path nextpath = new Path();
			nextpath=rasta[i++];
			//System.out.println(nextpath.src+" "+nextpath.dest+" "+nextpath.len);
			int x=find(subsets,nextpath.src);
			int y=find(subsets,nextpath.dest);
		//	System.out.println(x+" "+y);
			
			if(x!=y)
			{
				result[p++]=nextpath;
				union(subsets,x,y);
			}
		}
		int sum=0;
		for(v=0;v<p;v++)
		{
			sum=sum+result[v].len;
		}
		System.out.println(sum);
	}
		
	public static void main(String[] args)throws java.lang.Exception
	{
		Scanner sc=new Scanner(System.in);
		int t=sc.nextInt();
		for(int i=0;i<t;i++)
		{
			int count=0;
			int n=sc.nextInt();
			String Name[]=new String[n];
			int p[]=new int[n];
			int source[][]=new int[n][100];
			int destination[][]=new int[n][100];
			int cost[][]=new int[n][100];
			for(int j=0;j<n;j++)
			{
				Name[j]=sc.next();
				p[j]=sc.nextInt();
				
				for(int k=0;k<p[j];k++)
				{
					source[j][k]=j+1;
					destination[j][k]=sc.nextInt();
					cost[j][k]=sc.nextInt();
				}
			for(int k=0;k<p[j];k++)
			{
				if(source[j][k]<destination[j][k])
				{
					//System.out.println(source[j][k]+" "+destination[j][k]);
					count++;
				}
			}
		}
			//System.out.println(n+"--"+count);
			Main bt=new Main(n,count);
			int c=0;
			for(int j=0;j<n;j++)
			{
				for(int k=0;k<p[j];k++)
				{
					if(source[j][k]<destination[j][k])
					{
					//System.out.println(source[j][k]+" "+destination[j][k]+" "+cost[j][k]);
						if(c<count){
					bt.rasta[c].src=source[j][k];
					bt.rasta[c].dest=destination[j][k];
					bt.rasta[c].len=cost[j][k];
					//System.out.println(bt.rasta[c].src+" "+bt.rasta[c].dest+" "+bt.rasta[c].len);
					c++;}
					}
					}
				}
			bt.kruskal();
			//}
			//System.out.println(count);
//			blinnet bt=new blinnet(n,count);
//			for(int j=0;j<n;j++)
//			{
//				for(int k=0;k<=count;k++){
//					if(source[j][k]<destination[j][k]){
//					System.out.println(source[j][k]+" "+destination[j][k]+" "+cost[j][k]);
//				bt.rasta[k].src=source[j][k];
//				bt.rasta[k].dest=destination[j][k];
//				bt.rasta[k].len=cost[j][k];}
//			    }
//			}
			
		}
		sc.close();
	}
}
